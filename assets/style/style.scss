//=== Drawing effect

@mixin btn-border-drawing($color: #ccc, $hover: black, $width: 2px, $vertical: top, $horizontal: left, $duration: 0.25s) {
    box-shadow: inset 0 0 0 $width $color;
    color: $color;
    transition: color $duration $duration/3;
    position: relative;
    
    &::before,
    &::after {
      border: 0 solid transparent;
      box-sizing: border-box;
      content: '';
      pointer-events: none;
      position: absolute;
      width: 0; height: 0;
      
      #{$vertical}: 0; 
      #{$horizontal}: 0;
    }
  
    &::before {
      $h-side: if($horizontal == 'left', 'right', 'left');
      
      border-#{$vertical}-width: $width;
      border-#{$h-side}-width: $width;
    }
    
    &::after {
      $v-side: if($vertical == 'top', 'bottom', 'top');
      
      border-#{$v-side}-width: $width;
      border-#{$horizontal}-width: $width;
    }
    
    &:hover {
      color: $hover;
      
      &::before,
      &::after {
        border-color: $hover;
        transition: border-color 0s, width $duration, height $duration;
        width: 100%;
        height: 100%;
      }
      
      &::before { transition-delay: 0s, 0s, $duration; }
      
      &::after { transition-delay: 0s, $duration, 0s; }
    }
  }
  
  .draw-border {
    @include btn-border-drawing(#58afd1, #ffe593, 4px, bottom, right);
  }
  
  //=== Button styling, semi-ignore
  .btn {
    background: none;
    border: none;
    cursor: pointer;
    line-height: 1.5;
    font: 700 1.2rem 'Roboto Slab', sans-serif;
    padding: 1em 2em;
    letter-spacing: 0.05rem;
    
    &:focus { outline: 2px dotted #55d7dc; }
  }
  
  //=== Pen styling, ignore
  body { 
    background: #1f1a25;
    display: flex; 
    align-items: center;
    justify-content: center;
    min-height: 100vh;
  }

  // Animate the size, inside
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

// Animate the size, outside
.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow: 
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);  
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {  
  box-shadow: 
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);
  
  &:hover,
  &:focus {
    box-shadow: 
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
// $colors: (
//   fill: #a972cb,
//   pulse: #ef6eae, 
//   close: #ff7f82, 
//   raise: #ffa260, 
//   up: #e4cb58, 
//   slide: #8fc866, 
//   offset: #19bc8b
// );

// // Sass variables compile to a static string; CSS variables are dynamic and inherited
//   // Loop through the map and set CSS custom properties using Sass variables
// @each $button, $color in $colors {
//   .#{$button} {
//     --color: #{$color};
//     --hover: #{adjust-hue($color, 45deg)};
//   }
// }

// // Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
// button {  
//   color: var(--color);
//   transition: 0.25s;
  
//   &:hover,
//   &:focus { 
//     border-color: var(--hover);
//     color: #fff;
//   }
// }

// //=== Pen styling, ignore
// body {
//   color: #fff;
//   background: hsl(227, 10%, 10%);
//   font: 300 1em 'Fira Sans', sans-serif;
  
//   // Center everything ever
//   justify-content: center;
//   align-content: center;
//   align-items: center;
//   text-align: center;
//   min-height: 100vh;
//   display: flex;
// }

// // Basic button styles
// button {
//   background: none;
//   border: 2px solid;
//   font: inherit;
//   line-height: 1;
//   margin: 0.5em;
//   padding: 1em 2em;
// }

// h1 { font-weight: 400; }

// code { 
//   color: #e4cb58;
//   font: inherit;
// }

// // FILL IN RIGHT BUTTON
// a
//   text-decoration: none
//   color: inherit

// .cta
//   position: relative
//   margin: auto
//   padding: 19px 22px
//   transition: all .2s ease
//   &:before
//     content: ""
//     position: absolute
//     top: 0
//     left: 0
//     display: block
//     border-radius: 3px
//     background: rgba($primary,.5)
//     width: 56px
//     height: 56px
//     transition: all .3s ease
//   span
//     position: relative
//     font-size: 16px
//     line-height: 18px
//     font-weight: 900
//     letter-spacing: .25em
//     text-transform: uppercase
//     vertical-align: middle
//   svg
//     position: relative
//     top: 0
//     margin-left: 10px
//     fill: none
//     stroke-linecap: round
//     stroke-linejoin: round
//     stroke: $color
//     stroke-width: 2
//     transform: translateX(-5px)
//     transition: all .3s ease
//   &:hover
//     &:before
//       width: 100%
//       background: rgba($primary,1)
//     svg
//       transform: translateX(0)
//   &:active
//     transform: scale(.96)